Microsoft (R) Macro Assembler Version 14.16.27035.0	    02/14/20 09:37:55
AddTwo.asm						     Page 1 - 1


				; AddTwo.asm - adds two 32-bit integers.
				; Exercise 2
				; 2 + 4 + 8 + 10 + 12 + 14 =
				;
				;     50d
				;     0x32
				;
				;  2  4  8  10  12  14
				;  |  |  |  |   |   |___ 10
				;  |  |  |  |   |_______ 8
				;  |  |  |  |___________ 6
				;  |  |  |______________ 4
				;  |  |_________________ 2
				;  |____________________ 0


				.386
				.model flat,stdcall
				.stack 4096
				ExitProcess proto,dwExitCode:dword

 00000000			.data
 00000000  00000001 [			myList   WORD 1 DUP(2, 4, 8, 10, 12, 14)
	    0002 0004
	    0008 000A
	    000C 000E
	   ]
 = 00000002				W_SIZE   EQU 2

 00000000			.code
 00000000			main proc
 00000000  B8 00000000			mov eax, 0h	        ; debug purpose only
 00000005  BB 00000000			mov ebx, 0h         ; OFFSET Accumulator

 0000000A  66| 8B 83			mov ax, myList[bx]  ; first element
	   00000000 R

 00000011  66| 83 C3 02			add bx, W_SIZE      ; bx = 2 (4)
 00000015  66| 03 83			add ax, myList[bx]  ; 2 + 4 = 6
	   00000000 R

 0000001C  66| 83 C3 02			add bx, W_SIZE      ; bx = 4 (8)
 00000020  66| 03 83			add ax, myList[bx]  ; 6 + 8  = 14
	   00000000 R

 00000027  66| 83 C3 02			add bx, W_SIZE      ; bx = 6 (10)
 0000002B  66| 03 83			add ax, myList[bx]  ; 14 + 10  = 24
	   00000000 R

 00000032  66| 83 C3 02			add bx, W_SIZE      ; bx = 8 (12)
 00000036  66| 03 83			add ax, myList[bx]  ; 24 + 12  = 36
	   00000000 R

 0000003D  66| 83 C3 02			add bx, W_SIZE      ; bx = 10 (14)
 00000041  66| 03 83			add ax, myList[bx]  ; 36 + 14  = 50
	   00000000 R

 00000048  66| 89 83			mov myList[bx], ax  ; Store the result in the list-element position 6
	   00000000 R

					invoke ExitProcess,0
 0000004F  6A 00	   *	    push   +000000000h
 00000051  E8 00000000 E   *	    call   ExitProcess
 00000056			main endp
				end main
Microsoft (R) Macro Assembler Version 14.16.27035.0	    02/14/20 09:37:55
AddTwo.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000000C DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000056 DWord	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000056 Public STDCALL


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
W_SIZE . . . . . . . . . . . . .	Number	 00000002h   
myList . . . . . . . . . . . . .	Word	 00000000 _DATA	

	   0 Warnings
	   0 Errors
