Microsoft (R) Macro Assembler Version 14.16.27035.0	    03/06/20 09:23:04
AddTwo.asm						     Page 1 - 1


				; Indirect Addressing & Indexed Operands
				; Write and run a program to find the values of each destination operand:
				; And define the memory access mode marked by *

				.386
				.model flat,stdcall
				.stack 4096
					ExitProcess proto,dwExitCode:dword

 00000000			.data
 00000000 10 20 30 40			myBytes   BYTE 10h,20h,30h,40h
 00000004 008A 003B 0072		myWords	  WORD 8Ah,3Bh,72h,44h,66h
	   0044 0066
 0000000E 00000001			myDoubles DWORD 1,2,3,4,5
	   00000002
	   00000003
	   00000004
	   00000005
					
 00000022 0000000E R			myPointer DWORD myDoubles
					;=============================================================================
					;    myBytes		myWords			myDoubles			
					;   
					;    +----+				+----+			+----+				
					;    | 10 |	00   	00  | 8A | 04    00	| 01 | 14           
					;    +----+				+----+			+----+				
					;    | 20 |	01   	01  | 00 | 05	 01	| 00 | 15			
					;    +----+				+----+			+----+				
					;    | 30 |	02		02	| 3B | 06	 02	| 00 | 16			
					;    +----+				+----+			+----+				
					;    | 40 |	03		03	| 00 | 07	 03	| 00 | 17			
					;    +----+				+----+			+----+				
					;					04	| 72 | 08	 04	| 02 | 18			
					;          				+----+			+----+				
					;          			05	| 00 | 09	 05	| 00 | 19			
					;          				+----+			+----+				
					;          			06	| 44 | 10	 06	| 00 | 20			
					;          				+----+			+----+				
					;          			07	| 00 | 11	 07	| 00 | 21			
					;          				+----+			+----+				
					;          			08	| 66 | 12	 08	| 03 | 22			
					;          				+----+			+----+				
					;          			09	| 00 | 13	 09	| 00 | 23			
					;          				+----+			+----+				
					;          							 10	| 00 | 24			
					;          			      				+----+				
					;          							 11	| 00 | 25			
					;          			      				+----+				
					;          							 12	| 04 | 26			
					;          			      				+----+				
					;          							 13	| 00 | 27			
					;          			      				+----+				
					;          							 14	| 00 | 28			
					;          			      				+----+				
					;          							 15	| 00 | 29			
					;          			      				+----+				
					;          							 16	| 05 | 30			
					;          			      				+----+				
					;          							 17	| 00 | 31			
					;          			      				+----+				
					;          							 18	| 00 | 32			
					;          			      				+----+				
					;          							 19	| 00 | 33			
					;          			      				+----+				
					;=============================================================================
					
					
 00000000			.code
 00000000			main proc
 00000000  B8 00000000			mov eax,0				; debug purpose only

 00000005  BE 00000000 R		mov esi,OFFSET myBytes
 0000000A  8A 46 05			mov al,[esi+5]          ; AL = 1 byte
					;==============================
					; AL = 00 
					;==============================

 0000000D  8A 46 0E			mov al,[esi+14]         ; AL = 1 byte
					;==============================
					; AL   = 01
					; Mode = Indirect operand
					;==============================

 00000010  BE 00000006 R		mov esi,OFFSET myWords + 2
 00000015  66| 8B 06			mov ax,[esi]			; AX = 2 bytes
					;==============================
					; AX = 00 3B
					;==============================

 00000018  BF 00000008			mov edi,8
 0000001D  8B 15 00000006 R		mov edx, [myDoubles - 8]                  ; mov edx,[myDoubles - edi] - error compiling
					;==============================
					; EDX  = 00 72 00 3B 
					; Mode = Indirect Addressing
					;==============================

 00000023  8B 97 0000000E R		mov edx, myDoubles[edi]
					;==============================
					; EDX  = 00 00 00 03 
					;==============================
					
 00000029  8B 1D 00000022 R		mov ebx,myPointer
 0000002F  8B 43 04			mov eax,[ebx+4]
					;==============================
					; EAX  = 00 00 00 02 
					; Mode = Indirect using pointers
					;==============================

					invoke ExitProcess,0
 00000032  6A 00	   *	    push   +000000000h
 00000034  E8 00000000 E   *	    call   ExitProcess
 00000039			main endp
				end main
Microsoft (R) Macro Assembler Version 14.16.27035.0	    03/06/20 09:23:04
AddTwo.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000026 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000039 DWord	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000039 Public STDCALL


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
myBytes  . . . . . . . . . . . .	Byte	 00000000 _DATA	
myDoubles  . . . . . . . . . . .	DWord	 0000000E _DATA	
myPointer  . . . . . . . . . . .	DWord	 00000022 _DATA	
myWords  . . . . . . . . . . . .	Word	 00000004 _DATA	

	   0 Warnings
	   0 Errors
